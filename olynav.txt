class node {
  constructor(x,y,start=false,end=false) {
    this.x=x;
    this.y=y;
    this.isStart=start;
    this.isGoal=end;
    this.connections=[];
    this.parent;
  }
  distTo(n) {
    return Math.sqrt(Math.pow(n.x-this.x,2)+Math.pow(n.y-this.y,2));
  }
  f_cost(end) {
    if(this.isStart) {return 0;}
    var gCost = end.distTo(this);
    var hCost = h_cost(this,0);
    
    return gCost+hCost;
  }
  equals(n) {
    if(this.x==n.x && this.y==n.y) {return true;}
    return false;
  }
}
function drawNode(n, index) {
  pen.fillStyle="rgb(100,0,0)";
  if(n.isStart) {
    pen.fillStyle="rgb(0,255,0)";
  }
  if(n.isGoal) {
    pen.fillStyle="rgb(255,0,0)";
  }
  pen.beginPath();
  pen.ellipse(n.x,n.y,16,16,0,0,Math.PI*2);
  pen.fillText(index,n.x+20,n.y);
  pen.fill();
}
function h_cost(n,sum) {
  if(n.isStart) {return sum;}
  return sum+h_cost(n.parent,n.distTo(n.parent));
}
var canvas = document.getElementById('canvas');
var pen = canvas.getContext('2d');

var datas = [];

var numOfClasses=prompt("Number of nodes: ");

var onKey=0;


function mousePressed(e) {
  datas.push(new node(e.clientX,e.clientY));
  
  for(var i=0;i<datas.length;i++) {
    drawNode(datas[i], i);
  }
}
document.addEventListener("keydown", (event) => {
  if(event.key=="q" && datas.length==numOfClasses) {
    datas[0].isStart=true;
    datas[datas.length-1].isGoal=true;
    for(var i=0;i<datas.length;i++) {
      var neighbors = prompt("Neighbors for "+i+": ").split(',').map(x => datas[x]);
      datas[i].connections=neighbors;
    }
    var open = [];
    var closed = [];
    const goal = datas[datas.length-1];
    open.push(datas[0]);
    
    while(open.length!=0) {

      var f_costs = [];
      for(var i=0;i<open.length;i++) {
        f_costs[i]=open[i].f_cost(goal);
      }
      var currentNode=open[getSmallestIndex(f_costs)];
      open.splice(getSmallestIndex(f_costs));
      closed.push(currentNode);
      if(currentNode.isGoal) {
        console.log("Found goal!");
        raceToBottom(currentNode);
        break;
        
      }
      
      for(var i=0;i<currentNode.connections.length;i++) {
        var n = currentNode.connections[i];
        if(closed.filter(function(e){return e.x==n.x&&e.y==n.y;}).length>0) {
          continue;
        }
        if(open.filter(function(ee){return ee.x==n.x&&ee.y==n.y;}).length<1) {
          n.parent=currentNode;
          open.push(n);

        }
      }
    }
  }
});
function getSmallestIndex(n) {
  var min=0;
  for(var i=0;i<n.length;i++) {
    if(n[i]<n[min]) {
      min=i;
    }
  }
  return min;
}
function raceToBottom(n) {
  if(n.isStart) {return n;}
  pen.beginPath();
  pen.moveTo(n.x,n.y);
  pen.lineTo(n.parent.x,n.parent.y);
  pen.stroke();
  return raceToBottom(n.parent);
}
